<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>micro:bit Debug + Temp Monitor</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      margin: 0;
      font-family: sans-serif;
      background: #5ddb9a;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    h1 { color: white; margin: 20px; }
    .block {
      background: #fff;
      padding: 20px;
      margin: 15px;
      border-radius: 10px;
      box-shadow: 0 0 10px #0004;
      width: 90%;
      max-width: 600px;
    }
    .temp-value {
      font-size: 2.5em;
      color: #eb7a08;
    }
    .status {
      margin-top: 10px;
    }
    button {
      margin: 10px 5px 10px 0;
      padding: 10px 20px;
      font-size: 1em;
      background: #21f10a;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    button:hover {
      background: #3607f1dc;
      color: white;
    }
    canvas {
      margin-top: 20px;
      border-radius: 10px;
      background: #eee;
    }
    #logBox, #activityLogBox {
      background: #000;
      color: #0f0;
      font-family: monospace;
      padding: 10px;
      height: 200px;
      overflow-y: scroll;
      font-size: 0.9em;
      white-space: pre-wrap;
      margin-bottom: 5px;
    }
  </style>
</head>
<body>

<h1>üõ†Ô∏è micro:bit Debug + Temp Monitor</h1>

<div class="block">
  <h2>üîå USB (Any Device)</h2>
  <div id="usb-temp" class="temp-value">-- ¬∞C</div>
  <div id="usb-status" class="status">Disconnected</div>
  <button onclick="connectUSB()">Connect USB</button>
  <canvas id="usbChart" width="500" height="200"></canvas>
</div>

<div class="block">
  <h2>üì° BLE (BBC micro:bit only)</h2>
  <div id="ble-temp" class="temp-value">-- ¬∞C</div>
  <div id="ble-status" class="status">Disconnected</div>
  <button onclick="connectBLE()">Connect BLE</button>
  <canvas id="bleChart" width="500" height="200"></canvas>
</div>

<div class="block">
  <h2>üìã Debug Log (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor)</h2>
  <div id="logBox">[LOG INIT]</div>
  <button onclick="saveDebugLog()">üì• Save Debug Log</button>
</div>

<div class="block">
  <h2>‚öôÔ∏è Activity Log (‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á)</h2>
  <div id="activityLogBox">[ACTIVITY LOG INIT]</div>
  <button onclick="saveActivityLog()">üì• Save Activity Log</button>
</div>

<script>
  const MAX_POINTS = 30;
  const usbChart = createChart("usbChart", "USB Temp (¬∞C)");
  const bleChart = createChart("bleChart", "BLE Temp (¬∞C)");

  // Log buffers
  let debugLogBuffer = [];
  let activityLogBuffer = [];

  function createChart(canvasId, label) {
    const ctx = document.getElementById(canvasId).getContext('2d');
    return new Chart(ctx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [{
          label: label,
          data: [],
          borderColor: '#eb7a08',
          backgroundColor: 'rgba(235, 122, 8, 0.2)',
          tension: 0.3
        }]
      },
      options: {
        responsive: true,
        animation: false,
        scales: {
          x: { display: false },
          y: {
            min: 1,
            max: 50,
            ticks: {
              stepSize: 5,
              callback: v => `${v}¬∞C`
            },
            title: {
              display: true,
              text: "Temperature (¬∞C)"
            }
          }
        }
      }
    });
  }

  function updateChart(chart, temp) {
    const now = new Date().toLocaleTimeString();
    chart.data.labels.push(now);
    chart.data.datasets[0].data.push(temp);
    if (chart.data.labels.length > MAX_POINTS) {
      chart.data.labels.shift();
      chart.data.datasets[0].data.shift();
    }
    chart.update();
  }

  // Append debug log (sensor data)
  function appendDebugLog(message) {
    const logBox = document.getElementById('logBox');
    const timeStamped = `[${new Date().toLocaleTimeString()}] ${message}`;
    debugLogBuffer.push(timeStamped);
    logBox.textContent += "\n" + timeStamped;
    logBox.scrollTop = logBox.scrollHeight;
  }

  // Append activity log (background events)
  function appendActivityLog(message) {
    const activityLogBox = document.getElementById('activityLogBox');
    const timeStamped = `[${new Date().toLocaleTimeString()}] ${message}`;
    activityLogBuffer.push(timeStamped);
    activityLogBox.textContent += "\n" + timeStamped;
    activityLogBox.scrollTop = activityLogBox.scrollHeight;
  }

  // Save debug log to file
  function saveDebugLog() {
    const blob = new Blob([debugLogBuffer.join('\n')], {type: 'text/plain'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `debug-log-${new Date().toISOString().replace(/[:.]/g,'-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    appendActivityLog('[SYSTEM] Debug log saved to file.');
  }

  // Save activity log to file
  function saveActivityLog() {
    const blob = new Blob([activityLogBuffer.join('\n')], {type: 'text/plain'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `activity-log-${new Date().toISOString().replace(/[:.]/g,'-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    appendActivityLog('[SYSTEM] Activity log saved to file.');
  }

  // USB connect function
  async function connectUSB() {
    const usbStatus = document.getElementById('usb-status');
    const usbTemp = document.getElementById('usb-temp');
    activityLogBuffer.push(`[${new Date().toLocaleTimeString()}] [USB] Requesting port...`);
    appendActivityLog('[USB] Requesting port...');
    usbStatus.textContent = 'Connecting...';
    usbTemp.textContent = '-- ¬∞C';

    try {
      const port = await navigator.serial.requestPort();
      await port.open({ baudRate: 115200 });
      usbStatus.textContent = 'Connected';
      appendActivityLog('[USB] Port opened');

      const textDecoder = new TextDecoderStream();
      port.readable.pipeTo(textDecoder.writable);
      const reader = textDecoder.readable.getReader();

      while (true) {
        const { value, done } = await reader.read();
        if (done) {
          appendActivityLog('[USB] Reader closed');
          break;
        }
        if (value) {
          appendDebugLog('[USB] ' + value.trim());
          if (value.startsWith("USB Temp:")) {
            const temp = parseFloat(value.split(":")[1]);
            usbTemp.textContent = temp.toFixed(2) + " ¬∞C";
            updateChart(usbChart, temp);
          }
        }
      }
    } catch (err) {
      usbStatus.textContent = 'Error: ' + err.message;
      appendActivityLog('[USB] ERROR: ' + err.message);
    }
  }

  // BLE connect function
  async function connectBLE() {
    const bleStatus = document.getElementById('ble-status');
    const bleTemp = document.getElementById('ble-temp');

    appendActivityLog('[BLE] Requesting device...');
    bleStatus.textContent = 'Connecting...';

    try {
      const device = await navigator.bluetooth.requestDevice({
        filters: [{ namePrefix: 'BBC micro:bit' }],
        optionalServices: ['6e400001-b5a3-f393-e0a9-e50e24dcca9e']
      });

      appendActivityLog('[BLE] Device selected: ' + device.name);
      const server = await device.gatt.connect();
      const service = await server.getPrimaryService('6e400001-b5a3-f393-e0a9-e50e24dcca9e');
      const characteristic = await service.getCharacteristic('6e400003-b5a3-f393-e0a9-e50e24dcca9e');

      await characteristic.startNotifications();
      characteristic.addEventListener('characteristicvaluechanged', event => {
        const value = new TextDecoder().decode(event.target.value);
        appendDebugLog('[BLE] ' + value.trim());

        if (value.startsWith("BLE Temp:")) {
          const temp = parseFloat(value.split(":")[1]);
          bleTemp.textContent = temp.toFixed(2) + " ¬∞C";
          updateChart(bleChart, temp);
        }
      });

      bleStatus.textContent = 'Connected';
      appendActivityLog('[BLE] Connected and listening');
    } catch (err) {
      bleStatus.textContent = 'Error: ' + err.message;
      appendActivityLog('[BLE] ERROR: ' + err.message);
    }
  }
</script>
</body>
</html>
